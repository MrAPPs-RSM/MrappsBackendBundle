<?php

namespace Mrapps\BackendBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Mrapps\BackendBundle\Entity\Permission;
use FOS\UserBundle\Model\UserInterface;

/**
 * PermissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PermissionRepository extends EntityRepository
{
    public function clearPermissions() {

        $em = $this->getEntityManager();

        $q = $em->createQuery('delete from MrappsBackendBundle:Permission p where 1=1');
        $numDeleted = $q->execute();

        return $numDeleted;
    }

    public function addPermission($object = '', $role = '', $permissions = array(), $autoFlush = true, $forceEditValues = false) {

        $em = $this->getEntityManager();
        $object = trim($object);
        $role = trim($role);

        if(strlen($object) > 0 && strlen($role) > 0) {

            $p = $this->findOneBy(array('role' => $role, 'object' => $object));
            if(null == $p) {

                $p = new Permission();
                $p->setObject($object);
                $p->setRole($role);

                $forceEditValues = true;
            }

            if((bool)$forceEditValues) {

                $canView = (isset($permissions['view'])) ? intval($permissions['view']) : 0;
                $canCreate = (isset($permissions['create'])) ? intval($permissions['create']) : 0;
                $canEdit = (isset($permissions['edit'])) ? intval($permissions['edit']) : 0;
                $canDelete = (isset($permissions['delete'])) ? intval($permissions['delete']) : 0;

                $p->setCanView($canView);
                $p->setCanCreate($canCreate);
                $p->setCanEdit($canEdit);
                $p->setCanDelete($canDelete);

                $em->persist($p);
                if($autoFlush) {
                    $em->flush($p);
                }

            }

            return $p;
        }

        return null;
    }

    public function isObjectManaged($object = '') {

        $em = $this->getEntityManager();
        $count = $em->createQuery("
          SELECT COUNT(p)
          FROM MrappsBackendBundle:Permission p
          WHERE p.object = :object
          ")->setParameters(array('object' => trim($object)))->getSingleScalarResult();

        return ($count > 0);
    }

    public function getActiveRoles($object = '', $action = '') {

        $roles = array();

        $object = trim($object);
        $action = 'can'.ucwords(strtolower(trim($action)));   //canView, canCreate, ecc.

        if(strlen($object) > 0 && strlen($action) > 0) {
            $em = $this->getEntityManager();

            $perms = $em->createQuery("
              SELECT p
              FROM MrappsBackendBundle:Permission p
              WHERE p.object = :object
              AND p.".$action." = :action
            ")->setParameters(array(
                'object' => $object,
                'action' => 1,
            ))->execute();

            foreach($perms as $p) {
                $r =  $p->getRole();
                $roles[$r] = $r;
            }
        }

        return $roles;
    }

    public function getPermissions($object = '', UserInterface $user = null) {

        $isSuperAdmin = $user->hasRole('ROLE_SUPER_ADMIN');

        $canView = $isSuperAdmin;
        $canCreate = $isSuperAdmin;
        $canEdit = $isSuperAdmin;
        $canDelete = $isSuperAdmin;

        $object = trim($object);

        if(strlen($object) > 0 && $user !== null) {

            $roles = $user->getRoles();

            $em = $this->getEntityManager();

            $perms = $em->createQuery("
              SELECT p
              FROM MrappsBackendBundle:Permission p
              WHERE p.object = :object
              AND p.role IN (?1)
            ")->setParameters(array(
                'object' => $object,
                '1' => $roles,
            ))->execute();

            foreach($perms as $r) {

                if($r->getCanView() == true) {
                    $canView = true;
                }

                if($r->getCanCreate() == true) {
                    $canCreate = true;
                }

                if($r->getCanEdit() == true) {
                    $canEdit = true;
                }

                if($r->getCanDelete() == true) {
                    $canDelete = true;
                }
            }
        }

        return array(
            'view' => $canView,
            'create' => $canCreate,
            'edit' => $canEdit,
            'delete' => $canDelete,
        );
    }
}
