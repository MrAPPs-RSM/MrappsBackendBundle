{% trans_default_domain 'MrappsBackendBundle' %}
{% extends 'MrappsBackendBundle:Default:layout.html.twig' %}
{% block css %}
    <link rel="stylesheet" href="{{ asset('assets/vendor/ng-table/dist/ng-table.min.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/vendor/sweetalert/dist/sweetalert.css') }}">
{% endblock css %}
{% block content %}
    <div ng-controller="NGTableCtrl as table" class="container-fluid">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <div class="panel-title {% if (linkNew is defined and linkNew is not empty) or linkCustom is not null %}pull-left{% endif %}">
                </div>
                {% if is_granted('ROLE_SUPER_ADMIN') and current_object is defined and current_object|length > 0 and current_route is defined and current_route|length > 0 %}
                    <button type="submit" class="btn btn-labeled btn-info pull-left" ng-click="go('{{ path('mrapps_backend_permissions', {'object':current_object,'returnRoute':current_route }) }}')">
                        <span class="btn-label">
                            <em class="fa fa-check-square-o"></em>
                        </span>Permessi ({{ current_object }})
                    </button>
                {% endif %}
                {% if linkNew is defined and linkNew is not null and permissions.create == true %}
                    <button type="submit" class="btn btn-labeled btn-success pull-right" ng-click="go('{% if linkNew is iterable %}{{ path(linkNew.route, linkNew.params) }}{% else %}{{ linkNew }}{% endif %}')">
                    <span class="btn-label">
                        <em class="fa fa-plus"></em>
                    </span>{{ 'form.aggiungi_nuovo'|trans }}
                    </button>
                    {% if linkCustom is null %}
                        <div class="cb"></div>
                    {% endif %}
                {% endif %}
                {% if linkCustom is not null and permissions.edit == true %}
                    {% for item in linkCustom %}
                        <button type="submit" ng-click="go('{{ item.url }}')"
                                class="btn btn-labeled pull-right {{ item.class }}">
                            <em class="{{ item.icon }}"></em>
                            {{ item.text }}
                        </button>
                    {% endfor %}
                {% endif %}
            </div>
            <table ng-table="table.tableParams2" show-filter="true" class="table table-bordered table-striped">
                <tbody {% if linkOrder is not null %} ui-sortable="sortableOptions" ng-model="table.data" {% endif %}>

                <tr ng-repeat="row in $data">
                    {% for column in tableColumns %}
                        {% if column.visible is not defined or column.visible == true %}
                            <td data-title="'{{ column.title }}'"
                                    {% if column.filterable is defined and column.filterable==true %}
                                        {% set colType= (column.type=='checkbox'?'select':column.type) %}
                                        filter="{ '{{ column.name }}': '{{ colType }}' }" {% if column.type=='checkbox' or (column.type=='select' and column.filter_options is defined) %} filter-data="{{ column.name }}_filter" {% endif %}{% endif %} {% if column.sortable is defined and column.sortable==true %}sortable="'{{ column.name }}'"{% endif %} {% if column.clickable is defined %}ng-click="$event.stopPropagation();showChildren(row.id)"
                            {% endif %}>
                                {% if column.type == 'image' %}
                                    <img height="150px" ng-src="{/ row.{{ column.name }} /}">
                                {% elseif column.type=='checkbox' %}
                                    <input type="checkbox" onclick='event.preventDefault();'
                                           ng-checked="{/ row.{{ column.name }} /}">
                                {% elseif column.type=='html' %}
                                    <span ng-bind-html="row.{{ column.name }}|rawHtml"></span>
                                {% else %}
                                    {/ row.{{ column.name }} /}
                                {% endif %}
                            </td>
                        {% endif %}
                    {% endfor %}
                    <td class="button-column">
                        {% if linkEdit is not null and permissions.edit == true %}
                            <button ng-if="!row.hasOwnProperty('disableEdit')||row.disableEdit==false" type="button"
                                    ng-click="go({% if linkEdit is iterable %}'{{ path(linkEdit.route, linkEdit.params|merge({'id':'__PLACEHOLDER_ID__'})) }}',row.id{% else %}'{{ linkEdit }}/'+row.id{% endif %})" class="btn btn-sm btn-warning">
                                <em class="fa fa-edit"></em>
                            </button>
                        {% endif %}
                        {% if linkDelete is not null and permissions.delete == true %}
                            <button ng-if="!row.hasOwnProperty('disableDelete')||row.disableDelete==false" type="button"
                                    ng-click="deleteajax(row.id)" class="btn btn-sm btn-danger">
                                <em class="fa fa-trash-o"></em>
                            </button>
                        {% endif %}
                        {% if linkAction is not null and permissions.edit == true %}
                            {% for item in linkAction %}
                                <button type="button" ng-if="!row.hasOwnProperty('__linkActions') || !row.__linkActions.hasOwnProperty('{{ item.name }}') || row.__linkActions.{{ item.name }}==true"
                                        ng-click="{% if item.is_js == false %}go('{{ item.url }}/'+row.id){% else %}customFunction{{ loop.index }}(row){% endif %}"
                                        class="{{ item.class }}">
                                    <em class="{{ item.icon }}"></em>
                                    {% if item.text is defined %}{{ item.text|trim }}{% endif %}
                                </button>
                            {% endfor %}
                        {% endif %}
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>

{% endblock content %}
{% block srcjavascript %}
    <script src="{{ asset('assets/vendor/angular-resource/angular-resource.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/ng-table/dist/ng-table.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/sweetalert/dist/sweetalert.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/jquery-ui/jquery-ui.min.js') }}"></script>
    <script src='{{ asset('assets/vendor/angular-ui-sortable/sortable.min.js') }}'></script>
{% endblock srcjavascript %}
{% block javascript %}
    <script type="text/javascript">
        (function () {
            "use strict";

            myAngular.controller("NGTableCtrl", NGTableCtrl);

            myAngular.filter('rawHtml', ['$sce', function($sce){
                return function(val) {
                    return $sce.trustAsHtml(val);
                };
            }]);

            function NGTableCtrl($http, $window, $scope, $location, $filter, NgTableParams, $resource, $rootScope) {
                var self = this;
                var Api = $resource('{{ linkData }}');

                $scope.go = function (path, replaceId) {
                    if(typeof(replaceId) !== "undefined" && replaceId !== null) {
                        path = path.replace(/__PLACEHOLDER_ID__/g, replaceId);
                    }
                    $window.location.href = path;
                };

                $scope.isDragging = false;

                {% for column in tableColumns %}
                {% if column.type=='checkbox' %}
                $scope.{{ column.name }}_filter = [{"id": null, "title": ""}, {"id": 1, "title": "{{ 'checkbox.si'|trans }}"}, {
                    "id": 0,
                    "title": "{{ 'checkbox.no'|trans }}"
                }];
                {% elseif column.type=='select' and column.filter_options is defined %}
                $scope.{{ column.name }}_filter ={{ [{'id':null,'title':''}]|merge(column.filter_options) | json_encode | raw }};
                {% endif %}
                {% endfor %}

                $rootScope.showChildren = function (id) {
                    if (!$scope.isDragging) {
                        self.tableParams2.filter()["parent.id"] = id;
                        $rootScope.refreshBreadcrumbs(id);
                        self.tableParams2.reload();
                    }
                };

                var isDataLoading = false;

                self.tableParams2 = new NgTableParams({
                    page: 1,            // show first page
                    count: 10,          // count per page
                    sorting: {{ defaultSorting|raw }},
                    filter: {{ defaultFilter|raw }},
                }, {
                    //total: dati.length, // length of data
                    getData: function ($defer, params) {

                        if(isDataLoading === false) {
                            isDataLoading = true;
                            $('#main_body').prepend('<div id="overlay-waiting"><div id="overlay-waiting-content"><i class="fa fa-spin fa-spinner"></i>{{ 'form.attendere'|trans }}</div></div>');
                            Api.query(params.url(), function (data) {

                                // update table params
                                params.total(data.length);
                                // use build-in angular filter
                                /*var orderedData = params.filter() ?
                                 $filter('filter')(data, params.filter()) :
                                 data;*/
                                var orderedData = params.sorting() ?
                                        $filter('orderBy')(data, params.orderBy()) :
                                        orderedData;
                                self.data = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());

                                params.total(orderedData.length); // set total for recalc pagination

                                $defer.resolve(self.data);
                                $('#overlay-waiting').remove();

                                isDataLoading = false;
                            });
                        }
                    }
                });
                {% if linkDelete is not null and permissions.delete == true %}
                $scope.deleteajax = function (id) {
                    var data = {id: id};
                    swal({
                        title: "{{ 'form.elemento.procedere'|trans|e('js') }}",
                        text: "{{ deleteMessages['question']|e('js') }}",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "{{ 'checkbox.si'|trans|e('js') }}",
                        cancelButtonText: "{{ 'checkbox.no'|trans|e('js') }}",
                        closeOnConfirm: false,
                        closeOnCancel: false
                    }, function (isConfirm) {
                        if (isConfirm) {
                            $http.post('{{ linkDelete }}', data)
                                    .then(function successCallback(response) {
                                        if (response.data.success) {
                                            swal("{{ 'form.elemento.completato'|trans|e('js') }}", "{{ deleteMessages['success']|e('js') }}", "success");
                                            self.tableParams2.reload();
                                        } else {
                                            swal("{{ 'form.errore'|trans|e('js') }}", response.data.message, "error");
                                        }
                                    }, function errorCallback(response) {
                                        swal("{{ 'form.errore'|trans|e('js') }}", "{{ deleteMessages['error']|e('js') }}", "error");
                                    });
                        } else {
                            swal("{{ 'form.errore'|trans|e('js') }}", "{{ deleteMessages['cancel']|e('js') }}", "error");
                        }
                    });
                };
                {% endif %}
                {% if linkOrder is not null %}
                $scope.sortableOptions = {
                    start: function(e, ui) {
                        $scope.isDragging = true;
                    },
                    stop: function(e, ui) {
                        setTimeout(function(){ $scope.isDragging = false; }, 300);
                        //if(!self.tableParams2.hasFilter()){
                        $('#main_body').prepend('<div id="overlay-waiting"><div id="overlay-waiting-content"><i class="fa fa-spin fa-spinner"></i>Attendere...</div></div>');
                        $http({
                            method: 'POST',
                            url: '{{ linkOrder }}',
                            data: {
                                'data': self.data,
                                'page': self.tableParams2.url().page - 1,
                                'count': self.tableParams2.url().count
                            },
                            headers: {
                                'Content-Type': 'application/json'
                            },
                        }).then(function successCallback(response) {
                            $('#overlay-waiting').remove();
                            self.tableParams2.reload();
                            toastr.success('Ordinato!', 'Ordine salvato');
                        }, function errorCallback(response) {
                            $('#overlay-waiting').remove();
                            self.tableParams2.reload();
                            toastr.error('Errore!', 'Errore nel salvataggio');
                        });
                        //}
                    }
                };
                {% endif %}
                {% if linkAction is not null and permissions.edit == true %}
                {% for item in linkAction %}
                {% if item.is_js == true %}
                $scope.customFunction{{ loop.index }} = function (row) {
                    var id = row.id;
                    {{ item.javascript|raw }}
                };
                {% endif %}
                {% endfor %}
                {% endif %}
                {% if linkBreadcrumb is not null and linkBreadcrumb.type == 'js' %}
                $rootScope.refreshBreadcrumbs(self.tableParams2.filter()["parent.id"]);
                {% endif %}
            }
        })();
    </script>
{% endblock javascript %}
