{% trans_default_domain 'MrappsBackendBundle' %}
{% extends 'MrappsBackendBundle:Default:layout.html.twig' %}
{% block css %}
    <link rel="stylesheet" href="{{ asset('//cdnjs.cloudflare.com/ajax/libs/select2/3.4.8/select2.css') }}">
    <link rel="stylesheet" href="{{ asset('bundles/mrappsbackend/css/select2-bootstrap.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/vendor/angular-ui-bootstrap-bower/ui-bootstrap-csp.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/vendor/jstree/dist/themes/default/style.min.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/vendor/jquery-minicolors/jquery.minicolors.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/vendor/ui-select/dist/select.min.css') }}">
{% endblock css %}
{% block content %}
    <div ng-controller="FormValidationController as form" class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <form name="form.formValidate" ng-submit="form.submitForm()" novalidate=""
                      class="form-validate form-horizontal">
                    <!-- START panel-->
                    <div class="panel panel-default">
                        {% if edit==true and linkNew is defined and linkNew is not empty %}
                            <div class="panel-heading clearfix">
                                <div class="panel-title pull-left"></div>
                                <button type="submit" class="btn btn-labeled btn-success pull-right"
                                        ng-click="go('{{ linkNew }}')">
                    <span class="btn-label">
                        <em class="fa fa-plus"></em>
                    </span>{{ 'form.aggiungi_nuovo'|trans }}
                                </button>
                                <div class="cb"></div>
                            </div>
                        {% endif %}
                        <div class="panel-body">
                            {% for field in fields %}
                                {% if field.lang is defined and field.lang %}
                                    <div class="dropdown">
                                        <button class="btn btn-default dropdown-toggle lang_selector" type="button" id="dropdownLanguage" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                            it
                                            <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownLanguage">
                                            {% for lang in languages %}
                                                <li><a data-idlang="{{ lang.id }}" data-isocode="{{ lang.isoCode }}">{{ lang.name }}</a></li>
                                            {% endfor %}
                                        </ul>
                                    </div>
                                    {% set twig_name = ['MrappsBackendBundle:Type:',field.type,'.html.twig']|join %}
                                    {% set field_lang = field.value %}
                                    {% set field_name = field.name %}
                                    <div class="multilang">
                                        {% for lang in languages %}
                                            {% set field = field|merge({"name" : [field_name,'_',lang.id]|join}) %}
                                            {% set field = field|merge({"value" : field_lang[lang.id]}) %}
                                            {{ include(twig_name, { 'field': field }) }}
                                        {% endfor %}
                                    </div>

                                {% else %}
                                    {% set twig_name = ['MrappsBackendBundle:Type:',field.type,'.html.twig']|join %}
                                    {{ include(twig_name, { 'field': field }) }}
                                {% endif %}
                            {% endfor %}
                        </div>
                    </div>
                    <div class="panel-footer text-right">
                        {% if edit %}
                            <button type="submit" id="save" class="btn btn-info">{{ 'form.modifica'|trans }}</button>
                        {% else %}
                            <button type="submit" id="save" class="btn btn-success">{{ 'form.crea'|trans }}</button>
                        {% endif %}
                    </div>
            </div>
            <!-- END panel-->
            </form>
        </div>
    </div>
    <!-- END row-->
    </div>

{% endblock content %}
{% block srcjavascript %}
    <script src="//cdnjs.cloudflare.com/ajax/libs/select2/3.4.8/select2.min.js"></script>
    <script src="{{ asset('assets/vendor/angular-resource/angular-resource.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular-file-upload/dist/angular-file-upload.min.js') }}"></script>
    <script src='{{ asset('assets/vendor/tinymce-dist/tinymce.min.js') }}'></script>
    <script src='{{ asset('assets/vendor/angular-ui-tinymce/src/tinymce.js') }}'></script>
    <script src="{{ asset('assets/vendor/jquery-ui/jquery-ui.min.js') }}"></script>
    <script src='{{ asset('assets/vendor/angular-ui-sortable/sortable.min.js') }}'></script>
    <script src='{{ asset('assets/vendor/angular-ui-bootstrap-bower/ui-bootstrap-tpls.min.js') }}'></script>
    <script src="{{ asset('assets/vendor/jstree/dist/jstree.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/ng-js-tree/dist/ngJsTree.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular-ui-validate/dist/validate.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/jquery-minicolors/jquery.minicolors.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular-minicolors/angular-minicolors.js') }}"></script>
    <script src="{{ asset('assets/vendor/ui-select/dist/select.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/lodash/dist/lodash.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular-simple-logger/dist/angular-simple-logger.min.js') }}"></script>
    <script src="{{ asset('assets/vendor/angular-google-maps/dist/angular-google-maps.min.js') }}"></script>
{% endblock srcjavascript %}
{% block javascript %}
    <script type="text/javascript">
        'use strict';

        function changeLaguages() {
            var langSelector=$(".lang_selector");
            langSelector.next("ul").find("li > a").click(function(){
                var isoCode=$(this).attr("data-isocode");
                var idLang=$(this).attr("data-idlang");
                var idLangLength=idLang.toString().length;
                var fieldSet=$(".multilang fieldset");
                langSelector.each(function(){
                    $(this).html(isoCode+' <span class="caret"></span>');
                });
                fieldSet.each(function(){
                    if($(this).attr("id").substr(-idLangLength)==idLang) {
                        $(this).show();
                    }else {
                        $(this).hide();
                    }
                });
            });
        }

        function changeLaguagesReady(isoCode, idLang) {
            var langSelector=$(".lang_selector");
            var idLangLength=idLang.toString().length;
            var fieldSet=$(".multilang fieldset");
            langSelector.each(function(){
                $(this).html(isoCode+' <span class="caret"></span>');
            });
            fieldSet.each(function(){
                if($(this).attr("id").substr(-idLangLength)==idLang) {
                    $(this).show();
                }else {
                    $(this).hide();
                }
            });
        }

        $( document ).ready(function() {
            changeLaguagesReady("it",1);
            changeLaguages();
        });

        function select2default(item) {
            return '<div>'+item.value+'</div>';
        }

        {% set initializeGmaps = false %}
        {% set gmapsApiKey = '' %}
        {% for field in fields if initializeGmaps == false %}
        {% if field.type == "latlng" %}
        {% set initializeGmaps = true %}
        {% set gmapsApiKey = field.gmaps_api_key %}
        {% endif %}
        {% endfor %}
        {% if initializeGmaps == true %}
        myAngular.config(function(uiGmapGoogleMapApiProvider) {
            uiGmapGoogleMapApiProvider.configure({
                key: '{{ gmapsApiKey }}',
                v: '3',
                libraries: 'weather,geometry,visualization'
            });
        })
        {% endif %}

        myAngular.controller("FormValidationController", FormValidationController);

        {#  DIRETTIVE ANGULAR  #}
        myAngular.directive('validateFacebookDirective', function($http) {
            var toId;
            return {
                require: 'ngModel',
                link: function(scope, element, attr, mCtrl) {
                    element.on('blur', function (evt) {
                        scope.$apply(function () {
                            $http.get('{{ path('mrapps_backend_validatefacebook') }}?url=' + element.val()).success(function(data) {
                                mCtrl.$setValidity('facebook', data.valid);
                            });
                        });
                    });
                }
            };
        });

        function FormValidationController($scope, $http, FileUploader, uiGmapGoogleMapApi) {
            var vm = this;

            {% set jsFields = [] %}
            {% for field in fields %}
            {% set jsFields = jsFields|merge([field]) %}
            {% if field.type == 'switch' %}
            {% for inner_field in field.data %}
            {% set jsFields = jsFields|merge([inner_field]) %}
            {% endfor %}
            {% endif %}
            {% endfor %}

            {% for field in jsFields %}
            {% if field.type == "image" %}
            $scope.{{ field.name }}_url = '';
            {% if field.value is not null %}
            {% set field_url=field.value.url | imagine_filter('backend_thumbnail') %}
            var {{ field.name }} =
            {
                'id'
            :{{ field.value.id }},
                'url'
            :
                '{{ field_url }}'
            }
            ;

            $scope.form.{{ field.name }} = {{ field.name }}.
            id;
            $scope.{{ field.name }}_url = {{ field.name }}.
            url;
            {% endif %}

            $scope.{{ field.name }} = new FileUploader({
                url: '{{ path('mrapps_backend_uploadimmagine') }}',
                autoUpload: true,
                queueLimit: 1
            });
            $scope
        .{{ field.name }}.
            onBeforeUploadItem = function (item) {
                $scope
                .{{ field.name }}.
                clearQueue();
                $('#load_{{ field.name }}').removeClass('hide');
            };
            $scope
        .{{ field.name }}.
            onAfterAddingFile = function (item) {
                document.getElementById("save").disabled = true;
            };
            $scope
        .{{ field.name }}.
            onSuccessItem = function (fileItem, response, status, headers) {
                $('#load_{{ field.name }}').addClass('hide');
                if (response.success == false) {
                    toastr.error('{{ 'form.errore'|trans }}', response.message);
                    $scope
                .{{ field.name }}.
                    clearQueue();
                    $scope.form.{{ field.name }} = null;
                } else {
                    $scope.form.{{ field.name }} = response.id;
                    $scope.{{ field.name }}_url = response.url;
                }
                document.getElementById("save").disabled = false;
            };
            {% elseif field.type == "latlng" %}

            {% if field.getLatLng_ajax|length > 0 %}
            $scope.{{field.name}}ObtainLatLngLoading = false;
            $scope.{{field.name}}ObtainLatLngFnc = function() {

                $scope.{{field.name}}ObtainLatLngLoading = true;
                return $http.post('{{ field.getLatLng_ajax }}', {'form':$scope.form})
                        .then(function (response) {
                            if(response.data.success) {
                                $scope.form.{{field.name}}.address = response.data.address;
                                $scope.form.{{field.name}}.center.latitude = response.data.lat;
                                $scope.form.{{field.name}}.center.longitude = response.data.lng;
                            }else {
                                toastr.error('Errore!', 'Indirizzo non trovato.');
                            }
                            $scope.{{field.name}}ObtainLatLngLoading = false;
                        });
            };
            {% endif %}

            $scope.form.{{field.name}} = { address: '', center: { latitude: {{ field.value.lat|default('42.247564380437346') }}, longitude: {{ field.value.lng|default('12.916211206249972') }} }, zoom: {{ field.value.zoom|default('5') }} };

            $scope.{{field.name}}Marker = {
                id: {{ field.random_number }},
                coords: {
                    latitude: $scope.form.{{field.name}}.center.latitude,
                    longitude: $scope.form.{{field.name}}.center.longitude
        },
            options: { draggable: true },
            events: {
                dragend: function (marker, eventName, args) {

                    var lat = marker.getPosition().lat();
                    var lng = marker.getPosition().lng();

                    $scope.form.{{field.name}}.center.latitude = lat;
                    $scope.form.{{field.name}}.center.longitude = lng;
                }
            }
        };
            {% elseif field.type == "file" %}

            $scope.{{ field.name }}_uploading = false;
            $scope.{{ field.name }}_progress = 0;
            $scope.{{ field.name }}_original_name = '';
            $scope.{{ field.name }}_mime_type = '';
            $scope.{{ field.name }}_normalized_type = 'file';

            $scope.{{ field.name }}_assets = {
                'file': '{{ asset('/bundles/mrappsbackend/img/generic-file.png') }}',
                'image': '{{ asset('/bundles/mrappsbackend/img/generic-file.png') }}',
                'video': '{{ asset('/bundles/mrappsbackend/img/generic-file.png') }}',
                'pdf': '{{ asset('/bundles/mrappsbackend/img/pdf.png') }}',
                'zip': '{{ asset('/bundles/mrappsbackend/img/zip.png') }}',
                'json': '{{ asset('/bundles/mrappsbackend/img/json.png') }}'
            };

            {% if field.value is not null %}
            $scope.form.{{ field.name }} = {{ field.value.id }};
            $scope.{{ field.name }}_original_name = "{{ field.value.original_name }}";
            $scope.{{ field.name }}_mime_type = "{{ field.value.mime_type }}";
            $scope.{{ field.name }}_normalized_type = "{{ field.value.normalized_type }}";
            {% endif %}

            $scope.{{ field.name }} = new FileUploader({
                url: '{{ path('mrapps_backend_uploadfile') }}',
                autoUpload: true,
                queueLimit: 1
            });
            $scope
        .{{ field.name }}.
            onBeforeUploadItem = function (item) {
                $scope
                .{{ field.name }}.
                clearQueue();
                $('#load_{{ field.name }}').removeClass('hide');
            };
            $scope
        .{{ field.name }}.
            onAfterAddingFile = function (item) {
                document.getElementById("save").disabled = true;
                $scope.{{ field.name }}_uploading = true;
                $scope.{{ field.name }}_progress = 0;
            };
            $scope
        .{{ field.name }}.
            onProgressItem = function (item, progress) {
                $scope.{{ field.name }}_progress = progress;
            };
            $scope
        .{{ field.name }}.
            onSuccessItem = function (fileItem, response, status, headers) {
                $('#load_{{ field.name }}').addClass('hide');
                $scope.{{ field.name }}_uploading = false;
                $scope.{{ field.name }}_progress = 0;
                if (!response.success) {
                    toastr.error('{{ 'form.errore'|trans }}', response.message);
                    $scope
                .{{ field.name }}.
                    clearQueue();
                    $scope.form.{{ field.name }} = null;
                } else {
                    $scope.form.{{ field.name }} = response.data.id;
                    $scope.{{ field.name }}_original_name = response.data.file_name;
                    $scope.{{ field.name }}_mime_type = response.data.mime;
                    $scope.{{ field.name }}_normalized_type = response.data.normalized_type;
                }
                document.getElementById("save").disabled = false;
            };
            $scope
        .{{ field.name }}.
            onErrorItem = function (fileItem, response, status, headers) {
                $('#load_{{ field.name }}').addClass('hide');
                $scope.{{ field.name }}_uploading = false;
                $scope.{{ field.name }}_progress = 0;
                toastr.error('{{ 'form.errore'|trans }}', response);
                $scope
                .{{ field.name }}.
                clearQueue();
                $scope.form.{{ field.name }} = null;
            };
            {% elseif field.type == "gallery" %}

            {% set uploader_name = ['gallery_',field.name]|join %}

            $scope.gallery_{{ field.name }}_immagini = [];

            $scope.{{ uploader_name }} = new FileUploader({
                url: '{{ path('mrapps_backend_uploadimmagine') }}',
                autoUpload: true
            });

            $scope
        .{{ uploader_name }}.
            removeId = function (array, index) {
                array.splice(index, 1);
                $scope.form.{{ field.name }} = $scope.gallery_{{ field.name }}_immagini;
            }

            $scope
        .{{ uploader_name }}.
            onBeforeUploadItem = function (item) {
                document.getElementById("save").disabled = true;
                $('#load_{{ field.name }}').removeClass('hide');
            }

            $scope
        .{{ uploader_name }}.
            onSuccessItem = function (fileItem, response, status, headers) {
                if (response.success == false) {
                    toastr.error('Errore!', response.message);
                } else {
                    $('#load_{{ field.name }}').addClass('hide');
                    $scope.gallery_{{field.name}}_immagini.push(response);
                    $scope.form.{{ field.name }} = $scope.gallery_{{ field.name }}_immagini;
                    toastr.success('{{ 'form.errore'|trans }}', "{{ 'form.immagine_salvata'|trans }}");
                }
                document.getElementById("save").disabled = false;
            }

            {% if field.value is not null %}
            var gallery = {{ field.value | raw }};
            gallery.forEach(function (item) {
                $scope.gallery_{{field.name}}_immagini.push(item);
            });
            $scope.form.{{ field.name }} = $scope.gallery_{{ field.name }}_immagini;
            {% endif %}

            $scope.sortableOptions = {
                stop: function (e, ui) {
                    $scope.form.{{ field.name }} = $scope.gallery_{{ field.name }}_immagini;
                }
            };

            {% elseif field.type == "color" %}

            $scope.{{field.name}}ColorSettings = {
                control: 'brightness',
                theme: 'bootstrap',
                position: 'top left',
                {% if field.value is defined and field.value != null %}
                defaultValue: '{{ field.value }}',
                {% endif %}
                letterCase: 'uppercase',
            };

            {% elseif field.type == "order" %}

            var prodotti = {{ field.value | raw }};
            $scope.form.{{ field.name }} = [];
            prodotti.forEach(function (item) {
                $scope.form
                .{{ field.name }}.
                push(item);
            });

            {% elseif field.type == "data" %}
            $scope.{{ field.name }}_dpOpened = false;
            $scope.{{ field.name }}_dpOpen = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.{{ field.name }}_dpOpened = true;
            };
            $scope.{{ field.name }}_dpOptions = {
                startingDay: 1
            };

            var date_{{ field.name }} = new Date('{{ field.value }}');
            $scope.form.{{ field.name }} = date_{{ field.name }};

            {% elseif field.type == "select" %}

            setTimeout(function () {

                {% if field.ajax is defined and field.ajax == true %}

                $scope.{{ field.name }}Items = [];
                $scope.refresh{{ field.name }} = function(search) {
                    var text = search;
                    if(text.length >= {{ field.ajax_options.min_length|default(0) }}) {
                        var params = {q: search, form:$scope.form};
                        return $http.post('{{ field.ajax_options.url }}', params)
                                .then(function (response) {
                                    $scope.{{ field.name }}Items = response.data
                                });
                    }
                    return true;
                };

                //Set initial value
                {% if field.value is defined and field.value is not empty %}
                $http.get('{{ field.ajax_options.url }}?id={{ field.value }}')
                        .then(function (response) {
                            $scope.form.{{ field.name }} = response.data;
                        });
                {% endif %}

                {% else %}

                jQuery("#select_{{ field.name }}").select2({
                    {% if field.required==false %}
                    "allowClear": true,
                    {% endif %}
                    dropdownCssClass: "bigdrop"
                });

                {% if field.disable is defined and field.disable==true %}
                jQuery("#select_{{ field.name }}").prop("disabled", true);
                {% endif %}

                {% if field.value is defined and field.value is not empty %}

                {% if field.value is iterable %}
                $scope.form.{{ field.name }} = {{ field.value | json_encode }};
                {% else %}
                $scope.form.{{ field.name }} = "{{ field.value }}";
                {% endif %}

                jQuery("#select_{{ field.name }}").val($scope.form.{{ field.name }});
                jQuery("#select_{{ field.name }}").trigger('change');

                {% else %}
                {% if field.required==true %}

                {% set field_values= field.options | first %}
                {% if field_values.values is defined %}
                {% set field_value= field_values.values | first %}
                {% else %}
                {% set field_value= field_values %}
                {% endif %}

                $scope.form.{{ field.name }} = {{ field_value.value | json_encode }};
                jQuery("#select_{{ field.name }}").val($scope.form.{{ field.name }});
                jQuery("#select_{{ field.name }}").trigger('change');
                {% endif %}
                {% endif %}

                jQuery("#{{ field.name }}").on("change", function (e) {
                    $scope.form.{{ field.name }} = $("#select_{{ field.name }}").val();
                });

                {% endif %}

            }, 0);
            {% elseif field.type == "text" %}

            {% elseif field.type == "textarea" %}
            {% if field.value is defined %}
            $scope.form.{{ field.name }} = '{{ field.value|e('js') }}';
            $scope.form.{{ field.name }} = $scope.form
        .{{ field.name }}.
            toString();
            {% endif %}
            {% elseif field.type == "tree" %}
            $scope.{{ field.name }} = {{ field.options | raw }};
            $scope.{{ field.name }}Config = {
                core: {
                    multiple: {{ field.multiple|default("false") }},
                    animation: true,
                    error: function (error) {
                        alert('treeCtrl: error from js tree - ' + angular.toJson(error));
                    },
                    check_callback: true,
                    worker: true
                }
            };
            $scope.{{ field.name }}ChangeNode = function (event, object) {
                {% if field.multiple is defined and field.multiple %}
                var selected_nodes = $scope.{{field.name}}Tree.jstree(true).get_selected();
                var tmp = "";
                $.each(selected_nodes, function (i, v) {
                    tmp += v + "|";
                });
                $scope.form.{{ field.name }} = tmp;
                {% else %}
                if (typeof (object) !== "undefined" && typeof (object.node) !== "undefined") {
                    $scope.form.{{ field.name }} = object.node.id;
                }
                {% endif %}
            };
            {% if field.value is defined %}
            $scope.form.{{ field.name }} = '{{ field.value }}';
            {% endif %}
            {% elseif field.type == "pdf" %}
            $scope.{{ field.name }}_url = '';
            {% if field.value is not null %}
            {#
                TODO: fare la parte per il value
            #}
            //var {{ field.name }} = {{ field.value | raw }};
            //$scope.form.{{ field.name }} = {{ field.name }}.id;
            //$scope.{{ field.name }}_url = {{ field.name }}.url;
            {% endif %}

            $scope.{{ field.name }} = new FileUploader({
                url: '{{ path('mrapps_backend_uploadfile') }}',
                autoUpload: true,
                queueLimit: 1
            });
            $scope
        .{{ field.name }}.
            onBeforeUploadItem = function (item) {
                $scope
                .{{ field.name }}.
                clearQueue();
                $('#load_{{ field.name }}').removeClass('hide');
            };
            $scope
        .{{ field.name }}.
            onAfterAddingFile = function (item) {
                document.getElementById("save").disabled = true;
            };
            $scope
        .{{ field.name }}.
            onSuccessItem = function (fileItem, response, status, headers) {
                $('#load_{{ field.name }}').addClass('hide');
                console.log(response);
                if (!response.success) {
                    toastr.error('{{ 'form.errore'|trans }}', response.message);
                    $scope
                .{{ field.name }}.
                    clearQueue();
                    $scope.form.{{ field.name }} = null;
                } else {
                    toastr.success('{{ 'form.salvato'|trans }}', response.message);
                    $scope.form.{{ field.name }} = response.data;
                    //$scope.{{ field.name }}_url = response.url;
                }
                document.getElementById("save").disabled = false;
            };
            {% endif %}
            {% endfor %}

            vm.submitted = false;
            vm.validateInput = function (name, type) {
                if(typeof(name) !== "undefined" && typeof(type) !== "undefined") {
                    var input = vm.formValidate[name];
                    if(typeof(input) !== "undefined") {
                        return (input.$dirty || vm.submitted) && input.$error[type];
                    }
                }

                return true;
            };

            {% if create %}
            toastr.success('{{ 'form.elemento.creato'|trans }}', '{{ 'form.elemento.elemento_creato'|trans }}');
            {% endif %}

            // Submit form
            vm.submitForm = function () {
                vm.submitted = true;
                if (vm.formValidate.$valid) {
                    {% if confirmSave == true %}
                    if (confirm("{% if edit == false %}{{ 'form.elemento.nuovo_elemento'|trans }}{% else %}{{ 'form.elemento.salvare_modifiche'|trans }}{% endif %}")) {
                        {% endif %}
                        document.getElementById("save").disabled = true;
                        $('#main_body').prepend('<div id="overlay-waiting"><div id="overlay-waiting-content"><i class="fa fa-spin fa-spinner"></i>{{ 'form.attendere'|trans }}</div></div>');
                        $http({
                            method: 'POST',
                            url: '{{ linkSave }}',
                            data: $scope.form,
                            headers: {
                                'Content-Type': 'application/json'
                            },
                        }).then(function successCallback(response) {
                            $('#overlay-waiting').remove();
                            if (!response.data.success) {
                                toastr.error(response.data.message, '{{ 'form.errore'|trans }}');
                            } else {
                                {% if edit %}
                                toastr.success('{{ 'form.salvato'|trans }}', '{{ 'form.elemento.elemento_modificato'|trans }}');
                                {% else %}
                                location.href = '{{ linkEdit }}/' + response.data.data + '?create=true';
                                {% endif %}
                            }
                            document.getElementById("save").disabled = false;

                        }, function errorCallback(response) {
                            $('#overlay-waiting').remove();
                            toastr.error('{{ 'form.errore'|trans }}', '{{ 'form.errore_server'|trans }}');
                            document.getElementById("save").disabled = false;
                        });
                        {% if confirmSave == true %}
                    }
                    {% endif %}
                } else {
                    toastr.error('{{ 'form.errore'|trans }}', '{{ 'form.compila_campi'|trans }}');
                    return false;
                }
            };
            var src = null;
            $scope.tinymceOptions = {
                inline: false,
                skin: 'lightgray',
                theme: 'modern',
                plugins: [
                    "advlist autolink link image imagetools autoresize lists charmap print preview hr anchor pagebreak",
                    "searchreplace wordcount visualblocks visualchars insertdatetime media nonbreaking",
                    "table contextmenu directionality emoticons paste textcolor code"
                ],
                toolbar1: "undo redo | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | styleselect",
                toolbar2: "| link unlink anchor | image | forecolor backcolor  | print preview code",
                image_advtab: true,

                paste_data_images: true,
                images_upload_url: "{{ path('mrapps_backend_uploadimmagine') }}?texarea=1",
                images_upload_base_path: "{{ images_url }}/textarea/",
                images_upload_credentials: true,
                file_browser_callback: function (field_name, url, type, win) {
                    tinymce.activeEditor.windowManager.open({
                        title: 'Insert file',
                        body: [
                            {name: 'file', type: 'textbox', subtype: 'file', label: 'Upload', onchange: uploadFile},
                            {
                                type: 'container',
                                'minHeight': 50,
                                'minWidth': 50,
                                html: '<div id="load_textarea" class="hide sk-circle"><div class="sk-circle1 sk-child"></div><div class="sk-circle2 sk-child"></div><div class="sk-circle3 sk-child"></div><div class="sk-circle4 sk-child"></div><div class="sk-circle5 sk-child"></div><div class="sk-circle6 sk-child"></div><div class="sk-circle7 sk-child"></div><div class="sk-circle8 sk-child"></div><div class="sk-circle9 sk-child"></div><div class="sk-circle10 sk-child"></div><div class="sk-circle11 sk-child"></div><div class="sk-circle12 sk-child"></div></div>'
                            },

                        ],
                        buttons: [{
                            text: 'Insert',
                            classes: 'widget btn primary first abs-layout-item',
                            id: 'insertImage',
                            onclick: function (e) {
                                if (src != null) {
                                    tinyMCE.execCommand('mceInsertContent', false, '<img src="' + tinymce.activeEditor.settings.images_upload_base_path + src + '"/>');
                                    src = null;
                                }
                                tinymce.activeEditor.windowManager.close();
                                tinymce.activeEditor.windowManager.close();
                            },
                        }, {
                            text: 'Close',
                            onclick: function (e) {
                                tinymce.activeEditor.windowManager.close();
                            },
                        }]
                    });
                }
            };

            function uploadFile(a) {
                var file = a.currentTarget.files[0];
                $('#load_textarea').removeClass('hide');
                $('#insertImage').addClass('mce-disabled');
                $('#insertImage > button').prop('disabled', true);
                tinymce.activeEditor.editorUpload.uploadImages(customUpload);

                function customUpload(success) {

                    var xhr = new XMLHttpRequest();
                    xhr.withCredentials = tinymce.activeEditor.settings.images_upload_credentials;

                    xhr.open('POST', tinymce.activeEditor.settings.images_upload_url);

                    xhr.onload = function () {

                        var json;
                        if (xhr.status != 200) {
                            failure("HTTP Error: " + xhr.status);
                            return;
                        }

                        json = JSON.parse(xhr.responseText);

                        if (!json || typeof json.location != "string") {
                            failure("Invalid JSON: " + xhr.responseText);
                            return;
                        }
                        $('#load_textarea').addClass('hide');
                        $('#insertImage').removeClass('mce-disabled');
                        $('#insertImage > button').prop('disabled', false);
                        src = json.location;
                    };

                    var formData = new FormData();
                    formData.append('file', file, 'file');

                    xhr.send(formData);
                }
            }
        }
    </script>
{% endblock javascript %}
